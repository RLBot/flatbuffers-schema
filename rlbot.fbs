include "event.fbs";
include "gamestate.fbs";
include "matchstart.fbs";
include "rendering.fbs";

namespace rlbot.flat;

/// Sent when connecting to RLBot to indicate what type of messages are desired.
/// This could be sent by a bot, or a bot manager governing several bots, an
/// overlay, or any other utility that connects to the RLBot process.
table ReadyMessage {
  // If this is set, RLBot will send BallPrediction data back to the client when available.
  wants_ball_predictions:bool;
  // If this is set, RLBot will send MatchComms to the client when available.
  wants_comms:bool;
  // If this is set, RLBot will send MessagePacket data back to the client when available.
  wants_game_messages:bool;
  // If this is set, RLBot will close the connection after the match ends. The GUI will not want this
  close_after_match:bool;
}

table ControllerState {
  /// -1 for full reverse, 1 for full forward
  throttle:float;
  /// -1 for full left, 1 for full right
  steer:float;
  /// -1 for nose down, 1 for nose up
  pitch:float;
  /// -1 for full left, 1 for full right
  yaw:float;
  /// -1 for roll left, 1 for roll right
  roll:float;
  /// true if you want to press the jump button
  jump:bool;
  /// true if you want to press the boost button
  boost:bool;
  /// true if you want to press the handbrake button
  handbrake:bool;
  /// true if you want to press the 'use item' button, used in rumble etc.
  use_item:bool;
}

table PlayerInput {
  player_index:uint;
  controller_state:ControllerState (required);
}

root_type PlayerInput;

// Values are in "unreal units"
struct Vector3 {
  x:float;
  y:float;
  z:float;
}

/// Expresses the rotation state of an object in Euler angles, with values in radians.
struct Rotator {
  pitch:float;
  yaw:float;
  roll:float;
}

table BoxShape {
  length:float;
  width:float;
  height:float;
}

table SphereShape {
  diameter:float;
}

table CylinderShape {
  diameter:float;
  height:float;
}

union CollisionShape { BoxShape, SphereShape, CylinderShape }

table Touch {
  /// The name of the player involved with the touch.
  player_name:string (required);
  /// Seconds that had elapsed in the game when the touch occurred.
  game_seconds:float;
  /// The point of contact for the touch.
  location:Vector3 (required);
  /// The direction of the touch.
  normal:Vector3 (required);
  /// The Team which the touch belongs to, 0 for blue 1 for orange.
  team:uint;
  /// The index of the player involved with the touch.
  player_index:uint;
}

table ScoreInfo {
  score:uint;
  goals:uint;
  own_goals:uint;
  assists:uint;
  saves:uint;
  shots:uint;
  demolitions:uint;
}

table Physics {
  location:Vector3 (required);
  rotation:Rotator (required);
  velocity:Vector3 (required);
  angular_velocity:Vector3 (required);
}

enum AirState: ubyte {
  /// All wheels are on the ground
  OnGround,
  /// When the bot is jumping,
  /// then InAir right after
  Jumping,
  /// When the bot is double jumping,
  /// then InAir right after
  DoubleJumping,
  /// When the bot is dodging,
  /// then InAir right after
  Dodging,
  InAir,
}

table PlayerInfo {
  physics:Physics (required);
  score_info:ScoreInfo (required);
  hitbox:BoxShape (required);
  hitbox_offset:Vector3 (required);
  air_state:AirState;
  // How long until the bot cannot dodge anymore, -1 while on ground or when airborne for too long after jumping
  dodge_timeout:float;
  // How long until the bot is not demolished anymore, -1 if not demolished
  demolished_timeout:float;
  is_supersonic:bool;
  is_bot:bool;
  name:string (required);
  team:uint;
  boost:uint;
  /// In the case where the requested player index is not available, spawnId will help
  /// the framework figure out what index was actually assigned to this player instead.
  spawn_id:int;
}

table BallInfo {
  physics:Physics (required);
  latest_touch:Touch (required);
  shape:CollisionShape (required);
}

table BoostPadState {
  /// True if the boost can be picked up
  is_active:bool;
  /// The number of seconds since the boost has been picked up, or 0.0 if the boost is active.
  timer:float;
}

enum GameStateType: ubyte {
  /// Game has not been created yet
  Inactive = 0,
  /// 3-2-1 countdown
  Countdown = 1,
  /// After countdown, but before ball has been hit
  Kickoff = 2,
  /// Ball has been hit
  Active = 3,
  /// A goal was scored. Waiting for replay.
  GoalScored = 4,
  /// Watching replay
  Replay = 5,
  /// Game paused
  Paused = 6,
  /// Match has ended
  Ended = 7,
}

table GameInfo {
  seconds_elapsed:float;
  game_time_remaining:float;
  is_overtime:bool;
  is_unlimited_time:bool;
  game_state_type:GameStateType;
  world_gravity_z:float;
  /// Game speed multiplier, 1.0 is regular game speed.
  game_speed:float;
  /// Tracks the number of physics frames the game has computed.
  /// May increase by more than one across consecutive packets.
  /// Data type will roll over after 207 days at 120Hz.
  frame_num:uint;
}

table TeamInfo {
  team_index:uint;
  /// number of goals scored.
  score:uint;
}

table GameTickPacket {
  players:[PlayerInfo] (required);
  boost_pad_states:[BoostPadState] (required);
  ball:BallInfo (required);
  game_info:GameInfo (required);
  teams:[TeamInfo] (required);
}

root_type GameTickPacket;

// This section deals with arena information, e.g. where the goals and boost locations are.

table GoalInfo {
  team_num:int;
  location:Vector3 (required);
  direction:Vector3 (required);
  width:float;
  height:float;
}

table BoostPad {
  location:Vector3 (required);
  is_full_boost:bool;
}

table FieldInfo {
  /// BoostInfo will be provided in the same order.
  boost_pads:[BoostPad] (required);
  goals:[GoalInfo] (required);
}

root_type FieldInfo;

table PredictionSlice {
  /// The moment in game time that this prediction corresponds to.
  /// This corresponds to 'secondsElapsed' in the GameInfo table.
  game_seconds:float;
  /// The predicted location and motion of the object.
  physics:Physics (required);
}

table BallPrediction {
  /// A list of places the ball will be at specific times in the future.
  /// It is guaranteed to sorted so that time increases with each slice.
  /// It is NOT guaranteed to have a consistent amount of time between slices.
  slices:[PredictionSlice] (required);
}
