namespace rlbot.flat;

/// A bot controlled by the RLBot framework
table RLBot {}

/// A normal human player
table Human {}

/// A psyonix bot, e.g. All Star bot
table Psyonix {
  bot_skill:float;
}

/// A player that Rocket League treats as human, e.g. has a dedicated camera and can do training mode,
/// but is actually controlled by a bot.
table PartyMember {}

union PlayerClass { RLBot, Human, Psyonix, PartyMember }

/// The car type, color, and other aspects of the player's appearance.
/// See https://wiki.rlbot.org/botmaking/bot-customization/
table PlayerLoadout {
  team_color_id:uint;
  custom_color_id:uint;
  car_id:uint;
  decal_id:uint;
  wheels_id:uint;
  boost_id:uint;
  antenna_id:uint;
  hat_id:uint;
  paint_finish_id:uint;
  custom_finish_id:uint;
  engine_audio_id:uint;
  trails_id:uint;
  goal_explosion_id:uint;
  loadout_paint:LoadoutPaint;
  /// Sets the primary color of the car to the swatch that most closely matches the provided
  /// RGB color value. If set, this overrides teamColorId.
  primary_color_lookup:Color;
  /// Sets the secondary color of the car to the swatch that most closely matches the provided
  /// RGB color value. If set, this overrides customColorId.
  secondary_color_lookup:Color;
}

/// Specification for 'painted' items. See https://wiki.rlbot.org/botmaking/bot-customization/
table LoadoutPaint {
  car_paint_id:uint;
  decal_paint_id:uint;
  wheels_paint_id:uint;
  boost_paint_id:uint;
  antenna_paint_id:uint;
  hat_paint_id:uint;
  trails_paint_id:uint;
  goal_explosion_paint_id:uint;
}

table PlayerConfiguration {
  // Cannot be named 'class' because that breaks Java.
  // Cannot be named 'playerClass' because that breaks C#.
  variety:PlayerClass (required);
  name:string (required);
  team:uint;
  location:string (required);
  run_command:string (required);
  loadout:PlayerLoadout;
  /// In the case where the requested player index is not available, spawnId will help
  /// the framework figure out what index was actually assigned to this player instead.
  spawn_id:int;
}

enum GameMode : ubyte {
  Soccer,
  Hoops,
  Dropshot,
  Hockey,
  Rumble,
  Heatseeker,
  Gridiron
}

enum MatchLength : ubyte {
  Five_Minutes,
  Ten_Minutes,
  Twenty_Minutes,
  Unlimited
}

enum MaxScore : ubyte {
  Unlimited,
  One_Goal,
  Three_Goals,
  Five_Goals
}

enum OvertimeOption : ubyte {
  Unlimited,
  Five_Max_First_Score,
  Five_Max_Random_Team
}

enum SeriesLengthOption : ubyte {
  Unlimited,
  Three_Games,
  Five_Games,
  Seven_Games
}

enum GameSpeedOption : ubyte {
  Default,
  Slo_Mo,
  Time_Warp
}

enum BallMaxSpeedOption : ubyte {
  Default,
  Slow,
  Fast,
  Super_Fast
}

enum BallTypeOption : ubyte {
  Default,
  Cube,
  Puck,
  Basketball
}

enum BallWeightOption : ubyte {
  Default,
  Light,
  Heavy,
  Super_Light
}

enum BallSizeOption : ubyte {
  Default,
  Small,
  Large,
  Gigantic
}

enum BallBouncinessOption : ubyte {
  Default,
  Low,
  High,
  Super_High
}

enum BoostOption : ubyte {
  Normal_Boost,
  Unlimited_Boost,
  Slow_Recharge,
  Rapid_Recharge,
  No_Boost
}

enum RumbleOption : ubyte {
  No_Rumble, // Cannot be named None because that breaks Python.
  Default,
  Slow,
  Civilized,
  Destruction_Derby,
  Spring_Loaded,
  Spikes_Only,
  Spike_Rush
}

enum BoostStrengthOption : ubyte {
  One,
  OneAndAHalf,
  Two,
  Ten
}

enum GravityOption : ubyte {
  Default,
  Low,
  High,
  Super_High
}

enum DemolishOption : ubyte {
  Default,
  Disabled,
  Friendly_Fire,
  On_Contact,
  On_Contact_FF
}

enum RespawnTimeOption : ubyte {
  Three_Seconds,
  Two_Seconds,
  One_Seconds,
  Disable_Goal_Reset
}

table MutatorSettings {
  match_length:MatchLength;
  max_score:MaxScore;
  overtime_option:OvertimeOption;
  series_length_option:SeriesLengthOption;
  game_speed_option:GameSpeedOption;
  ball_max_speed_option:BallMaxSpeedOption;
  ball_type_option:BallTypeOption;
  ball_weight_option:BallWeightOption;
  ball_size_option:BallSizeOption;
  ball_bounciness_option:BallBouncinessOption;
  boost_option:BoostOption;
  rumble_option:RumbleOption;
  boost_strength_option:BoostStrengthOption;
  gravity_option:GravityOption;
  demolish_option:DemolishOption;
  respawn_time_option:RespawnTimeOption;
}

enum ExistingMatchBehavior : ubyte {
  /// Restart the match if any match settings differ. This is the default because old RLBot always worked this way.
  Restart_If_Different,
  /// Always restart the match, even if config is identical
  Restart,
  /// Never restart an existing match, just try to remove or spawn cars to match the configuration.
  /// If we are not in the middle of a match, a match will be started. Handy for LAN matches.
  Continue_And_Spawn,
}

enum Launcher : ubyte {
  Steam,
  Epic,
  Custom
}

table ScriptConfiguration {
  location:string (required);
  run_command:string (required);
}

table MatchSettings {
  /// Leave unset to tell RLBot to not launch the game
  launcher:Launcher;
  /// The path to the main Rocket League binary
  game_path:string (required);
  auto_start_bots:bool;
  /// The name of a upk file, like UtopiaStadium_P, which should be loaded.
  /// On Steam version of Rocket League this can be used to load custom map files,
  /// but on Epic version it only works on the Psyonix maps.
  game_map_upk:string (required);
  player_configurations:[PlayerConfiguration] (required);
  script_configurations:[ScriptConfiguration] (required);
  game_mode:GameMode;
  skip_replays:bool;
  instant_start:bool;
  mutator_settings:MutatorSettings;
  existing_match_behavior:ExistingMatchBehavior;
  enable_rendering:bool;
  enable_state_setting:bool;
  auto_save_replay:bool;
}

table StartCommand {
  config_path:string (required);
}

table StopCommand {
	// If we want to shut down RLBot completely after stopping the match, not just the bots
	shutdown_server:bool;
}
